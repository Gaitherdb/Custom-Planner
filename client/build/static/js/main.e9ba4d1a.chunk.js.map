{"version":3,"sources":["utils/mutations.js","utils/auth.js","utils/dateHelp.js","components/NoteForm.js","components/NoteList.js","utils/queries.js","pages/Home.js","pages/Day.js","pages/Month.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["CREATE_USER","gql","LOGIN_USER","SAVE_TODO","EDIT_TODO","EDIT_ISCOMPLETE","DELETE_TODO","token","this","getToken","isTokenExpired","decode","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","value","toString","split","slice","join","replace","monthLetters","month","day","year","monthNum","getMonth","monthFullName","NoteForm","props","dayId","useParams","dateHelp","getYear","getDay","getMonthLetters","monthConversion","date","useState","task","setTask","todosId","set_id","useMutation","saveTodo","error","editTodo","handleFormSubmit","event","preventDefault","variables","data","console","log","refetch","handleEditSubmit","reload","className","Auth","loggedIn","edit","onSubmit","type","placeholder","name","onChange","e","target","_id","style","lineHeight","resize","message","NoteList","todos","setEdit","show","setShow","handleClose","handleShow","editIsComplete","deleteTodo","completeTodo","id","updatedTodo","filter","todo","isComplete","handleDelete","map","key","onClick","role","aria-label","variant","Modal","onHide","backdrop","keyboard","Header","closeButton","Title","Body","Footer","GET_ME","Home","renderNoteList","valueDate","useQuery","loading","me","setValue","history","useHistory","firstUpdate","useRef","todayDate","savedTodos","inComplete","thisPageTodo","ids","Set","d","merged","has","useEffect","current","valueYear","valueDay","valueMonthLetters","valueMonth","push","Container","showNavigation","view","DayTodo","fontSize","fontStyle","border","writtenDate","Month","renderMonthlyReview","allTodos","thisMonth","fullNameMonth","thisMonthTodo","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","createUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","Form","noValidate","Alert","dismissible","onClose","Group","Label","htmlFor","Control","required","Feedback","Button","disabled","LoginForm","loginUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","fluid","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","size","aria-labelledby","Tab","defaultActiveKey","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9ba4d1a.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const CREATE_USER = gql`\r\n  mutation createUser($username: String!, $email: String!, $password: String!) {\r\n    createUser(username: $username, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const SAVE_TODO = gql`\r\n  mutation saveTodo($task: String!, $date: String!) {\r\n    saveTodo(task: $task, date: $date) {\r\n      _id\r\n      task\r\n      createdAt\r\n      date\r\n      isComplete\r\n    }\r\n  }\r\n`;\r\n\r\nexport const EDIT_TODO = gql`\r\n  mutation editTodo($todosId: ID!, $task: String!, $date: String!) {\r\n    editTodo(todosId: $todosId, task: $task, date: $date) {\r\n      _id\r\n      task\r\n      createdAt\r\n      date\r\n      isComplete\r\n    }\r\n  }\r\n`;\r\nexport const EDIT_ISCOMPLETE = gql`\r\n  mutation editIsComplete($todosId: ID!, $isComplete: Boolean) {\r\n    editIsComplete(todosId: $todosId, isComplete: $isComplete) {\r\n      _id\r\n      task\r\n      createdAt\r\n      date\r\n      isComplete\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_TODO = gql`\r\n  mutation deleteTodo($todosId: ID!) {\r\n    deleteTodo(todosId: $todosId) {\r\n      _id\r\n      task\r\n      createdAt\r\n      date\r\n      isComplete\r\n    }\r\n  }\r\n`;\r\n\r\n","// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  // getProfile() {\r\n  //   return decode(this.getToken());\r\n  // }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","class dateHelp {\r\n  //only used for the calendar where format is ex. jan 01 2022\r\n  getYear(value) {\r\n    if (value) {\r\n      return value.toString().split(' ').slice(3, 4)[0];\r\n    }\r\n    return new Date().toString().split(' ').slice(3, 4)[0];\r\n  }\r\n  //only used for the calendar where format is ex. Jan 01 2022 \r\n  getDay(value) {\r\n    if (value) {\r\n      return value.toString().split(' ').slice(2, 3)[0];\r\n    }\r\n    return new Date().toString().split(' ').slice(2, 3)[0];\r\n  }\r\n\r\n  getMonth(value) {\r\n    if (value) {\r\n      return value.split('').slice(4, 6).join().replace(/,/g, \"\");\r\n    }\r\n    //no need to get new date info bc the calendar uses letters\r\n  }\r\n\r\n  getMonthLetters(value) {\r\n    if (value) {\r\n      return value.toString().split(' ').slice(1, 2)[0];\r\n    }\r\n    return new Date().toString().split(' ').slice(1, 2)[0];\r\n  }\r\n\r\n\r\n\r\n  monthConversion(monthLetters) {\r\n    var month;\r\n\r\n    switch (monthLetters) {\r\n      case 'Jan':\r\n        month = \"01\";\r\n        break;\r\n      case 'Feb':\r\n        month = \"02\";\r\n        break;\r\n      case 'Mar':\r\n        month = \"03\";\r\n        break;\r\n      case 'Apr':\r\n        month = \"04\";\r\n        break;\r\n      case 'May':\r\n        month = \"05\";\r\n        break;\r\n      case 'Jun':\r\n        month = \"06\";\r\n        break;\r\n      case 'Jul':\r\n        month = \"07\";\r\n        break;\r\n      case 'Aug':\r\n        month = \"08\";\r\n        break;\r\n      case 'Sep':\r\n        month = \"09\";\r\n        break;\r\n      case 'Oct':\r\n        month = \"10\";\r\n        break;\r\n      case 'Nov':\r\n        month = \"11\";\r\n        break;\r\n      case 'Dec':\r\n        month = \"12\";\r\n        break;\r\n      default:\r\n        month = \"unknown\";\r\n    }\r\n    return month;\r\n  }\r\n\r\n  monthFullName(value) {\r\n    var month;\r\n    switch (value) {\r\n      case '01':\r\n        month = \"January\";\r\n        break;\r\n      case '02':\r\n        month = \"Feburary\";\r\n        break;\r\n      case '03':\r\n        month = \"March\";\r\n        break;\r\n      case '04':\r\n        month = \"April\";\r\n        break;\r\n      case '05':\r\n        month = \"May\";\r\n        break;\r\n      case '06':\r\n        month = \"June\";\r\n        break;\r\n      case '07':\r\n        month = \"July\";\r\n        break;\r\n      case '08':\r\n        month = \"August\";\r\n        break;\r\n      case '09':\r\n        month = \"September\";\r\n        break;\r\n      case '10':\r\n        month = \"October\";\r\n        break;\r\n      case '11':\r\n        month = \"November\";\r\n        break;\r\n      case '12':\r\n        month = \"December\";\r\n        break;\r\n      default:\r\n        month = \"unknown\";\r\n    }\r\n    return month;\r\n  }\r\n\r\n  writtenDate(value) {\r\n    let day = value.toString().split('').slice(6, 8).join().replace(/,/g, \"\");\r\n\r\n    let year = value.toString().split('').slice(0, 4).join().replace(/,/g, \"\");\r\n\r\n    let monthNum = this.getMonth(value);\r\n    let month = this.monthFullName(monthNum);\r\n    let date = month + \" \" + day + \" \" + year;\r\n    return date;\r\n  }\r\n}\r\n\r\nexport default new dateHelp();","import React, { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport { EDIT_TODO, SAVE_TODO } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\nimport dateHelp from '../utils/dateHelp';\r\n\r\n\r\nfunction NoteForm(props) {\r\n  let { dayId } = useParams();\r\n\r\n  if (!dayId) {\r\n\r\n    const year = dateHelp.getYear();\r\n    const day = dateHelp.getDay();\r\n    const monthLetters = dateHelp.getMonthLetters();\r\n    const month = dateHelp.monthConversion(monthLetters);\r\n    const todayDate = year + month + day;\r\n    dayId = todayDate;\r\n  }\r\n\r\n  const date = dayId;\r\n  const [task, setTask] = useState('');\r\n  const [todosId, set_id] = useState('');\r\n  const [saveTodo, { error }] = useMutation(SAVE_TODO);\r\n  const [editTodo] = useMutation(EDIT_TODO);\r\n  \r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const { data } = await saveTodo({\r\n        variables: {\r\n          task,\r\n          date\r\n        },\r\n      });\r\n      setTask('');\r\n      console.log(data);\r\n      //calls for the query on either the homepage or daypage to run again\r\n      props.refetch();\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const handleEditSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const {data} = await editTodo({\r\n        variables: {\r\n          todosId,\r\n          task,\r\n          date,\r\n        },\r\n      });\r\n      setTask('');\r\n      set_id('');\r\n      console.log(data);\r\n      window.location.reload();\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"todolDiv\">\r\n      <h3>To-Do List</h3>\r\n\r\n      {Auth.loggedIn() ? (\r\n        !props.edit ? (\r\n          <>\r\n            <form\r\n              className=\"flex-row justify-center justify-space-between-md align-center\"\r\n              onSubmit={handleFormSubmit}\r\n            >\r\n              <div className=\"col-12 col-lg-9\">\r\n                <textarea\r\n                  name=\"notes\"\r\n                  placeholder=\"New task...\"\r\n                  value={task}\r\n                  className=\"form-input w-200\"\r\n                  style={{ lineHeight: '1.5', resize: 'vertical' }}\r\n                  onChange={(e) => setTask(e.target.value)}\r\n                ></textarea>\r\n              </div>\r\n\r\n              <div className=\"col-12\">\r\n                <button className=\"btn btn-block py-3 button dark-color\" type=\"submit\">\r\n                  Add to your list\r\n                </button>\r\n              </div>\r\n              {error && (\r\n                <div className=\"col-12 my-3 bg-danger text-white p-3\">\r\n                  {error.message}\r\n                </div>\r\n              )}\r\n            </form>\r\n          </>\r\n        ) : (<div>\r\n          <h3>Update task: {props.edit.value}</h3>\r\n          <form className=\"\" onSubmit={handleEditSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder={props.edit.value}\r\n              value={task}\r\n              name=\"text\"\r\n              onChange={(e) => {\r\n                setTask(e.target.value); set_id(props.edit._id)\r\n              }}\r\n            ></input>\r\n            <button className=\"upbutton\">Update</button>\r\n          </form>\r\n        </div>\r\n        )\r\n      ) : (\r\n        <p>\r\n          You need to be logged in to start a todo list.\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteForm\r\n","import React, { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport NoteForm from '../components/NoteForm';\r\nimport { useMutation } from '@apollo/client';\r\nimport { EDIT_ISCOMPLETE, DELETE_TODO } from '../utils/mutations';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport dateHelp from '../utils/dateHelp';\r\n\r\n\r\n\r\nconst NoteList = (props) => {\r\n  var todos = props.todos;\r\n  let { dayId } = useParams();\r\n  if (!dayId) {\r\n    const year = dateHelp.getYear();\r\n    const day = dateHelp.getDay();\r\n    const monthLetters = dateHelp.getMonthLetters();\r\n    const month = dateHelp.monthConversion(monthLetters);\r\n    const todayDate = year + month + day;\r\n    dayId = todayDate;\r\n  }\r\n\r\n  const [edit, setEdit] = useState({\r\n    _id: null,\r\n    value: '',\r\n  });\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const [editIsComplete] = useMutation(EDIT_ISCOMPLETE);\r\n  const [deleteTodo] = useMutation(DELETE_TODO);\r\n\r\n  // Function to mark todo item as complete\r\n  const completeTodo = async (id) => {\r\n    let isComplete;\r\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\r\n    let updatedTodo = todos.filter(todo => todo._id === id);\r\n    if (updatedTodo[0].isComplete === false) {\r\n      isComplete = true;\r\n    } else {\r\n      isComplete = false;\r\n    }\r\n\r\n    let todosId = id;\r\n    \r\n    try {\r\n      const { data } = await editIsComplete({\r\n        variables: {\r\n          todosId,\r\n          isComplete,\r\n        },\r\n      });\r\n      console.log(data);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  //if the edit button is clicked, the empty edit state changes and now has an _id\r\n  if (edit._id !== '' && edit._id !== null) {\r\n    //send this single todo item info to the noteform\r\n    return <NoteForm edit={edit} />;\r\n  }\r\n\r\n  const handleDelete = async (id) => {\r\n    let todosId = id.id;\r\n    try {\r\n      const { data } = await deleteTodo({\r\n        variables: {\r\n          todosId\r\n        },\r\n      });\r\n      window.location.reload();\r\n      console.log(data);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  if (!todos) {\r\n    return <h3>No notes yet</h3>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h5 className=\"todolDiv text-center\">\r\n        What is on your plate?</h5>\r\n      {todos &&\r\n        todos.map((todo) => (\r\n          <div className={\r\n            //if todo is complete, cross it out and it'll disappear from home page if it's old\r\n            todo.isComplete\r\n              ? `dark-color d-flex mb-1 complete borderNone`\r\n              : `dark-color d-flex mb-1 borderNone`\r\n            &&\r\n            //if todo is incomplete and old, it'll have a red border around it\r\n            todo.date < dayId\r\n              ? `dark-color d-flex mb-1 redBorder`\r\n              : `dark-color d-flex mb-1 borderNone`\r\n\r\n          }\r\n         \r\n            key={todo._id} >\r\n            <button key={todo._id} onClick={() => completeTodo(todo._id)} className=\" text-light mr-auto borderNone\" id='todo-button'>\r\n              {todo.task}\r\n            </button>\r\n            <p className=\"p-2\" onClick={() => setEdit({ _id: todo._id, value: todo.task })}> <span role=\"img\" aria-label=\"edit\"><i className=\"far fa-edit accent-color-light\"></i></span></p>\r\n            <p className=\"p-2\" variant=\"primary\" onClick={handleShow} ><span role=\"img\" aria-label=\"delete\"><i className=\"far fa-trash-alt accent-color-light\"></i></span> </p>\r\n           \r\n            <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title><span role=\"img\" aria-label=\"delete\"><i className=\"far fa-trash-alt \"></i></span></Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          Are you sure you want to delete?\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <button className=\"text-light\" variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </button>\r\n          <button className=\"text-light\" variant=\"primary\" onClick={() => handleDelete({ id: todo._id })}>Yes</button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n          </div>\r\n        ))}\r\n\r\n     \r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteList;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_ME = gql`\r\n  query me {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      password\r\n      savedTodos {\r\n        _id\r\n        task\r\n        createdAt\r\n        date\r\n        isComplete\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport NoteList from '../components/NoteList';\r\nimport NoteForm from '../components/NoteForm';\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_ME } from '../utils/queries';\r\nimport dateHelp from '../utils/dateHelp';\r\n\r\n\r\nconst Home = (props) => {\r\n  const { loading, data, refetch } = useQuery(GET_ME);\r\n  const todos = data?.me || [];\r\n  const [value, setValue] = useState(new Date());\r\n  const view = \"month\";\r\n  const history = useHistory();\r\n  const firstUpdate = useRef(true);\r\n  var renderNoteList;\r\n\r\n  const year = dateHelp.getYear();\r\n  const day = dateHelp.getDay();\r\n  const monthLetters = dateHelp.getMonthLetters();\r\n  const month = dateHelp.monthConversion(monthLetters);\r\n  const todayDate = year + month + day;\r\n  var valueDate;\r\n\r\n  if (todos.savedTodos) {\r\n    renderNoteList = true;\r\n\r\n    if (!loading) {\r\n\r\n      var inComplete = todos.savedTodos.filter(todo => todo.isComplete === false && todo.date <= todayDate);\r\n      var thisPageTodo = todos.savedTodos.filter(todo => todo.date === todayDate);\r\n      //finds the ids of all the incomplete todos\r\n      var ids = new Set(inComplete.map(d => d._id));\r\n      //a list of all the incomplete todos and any todos created today except for any incomplete todos from today as they are already accounted for\r\n      var merged = [...inComplete, ...thisPageTodo.filter(id => !ids.has(id._id))];\r\n\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (firstUpdate.current) {\r\n      firstUpdate.current = false;\r\n      return;\r\n    }\r\n    let valueYear = dateHelp.getYear(value);\r\n    let valueDay = dateHelp.getDay(value);\r\n    let valueMonthLetters = dateHelp.getMonthLetters(value);\r\n    let valueMonth = dateHelp.monthConversion(valueMonthLetters);\r\n    valueDate = valueYear + valueMonth + valueDay;\r\n    \r\n    //changes the url to the date page for the date selected on the calendar\r\n    history.push(`/day/${(valueDate)}`); // This is be executed when the state changes\r\n  }, [value]);\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n      <Container className=\"wholeCon\">\r\n        <div className=\"calDiv\">\r\n          <Calendar\r\n            showNavigation={true}\r\n            onChange={setValue}\r\n            value={value}\r\n            view={view}\r\n          />\r\n        </div>\r\n        {/* value.toString().split(' ').slice(1, 4).join() */}\r\n        <NoteForm\r\n          value={todayDate}\r\n          {...{ refetch }}\r\n        />\r\n        {renderNoteList ? (\r\n          <div className=\"col-12 col-md-8 mb-3\">\r\n            {loading ? (\r\n              <div>Loading...</div>\r\n            ) : (\r\n              <NoteList\r\n                todos={merged}\r\n                value={todayDate}\r\n                {...{ refetch }}\r\n              />\r\n            )}\r\n          </div>\r\n        ) : (<div>Add a note?</div>)}\r\n\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport Calendar from 'react-calendar';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\nimport NoteList from '../components/NoteList';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport NoteForm from '../components/NoteForm';\r\nimport { GET_ME } from '../utils/queries';\r\nimport dateHelp from '../utils/dateHelp';\r\n\r\nconst DayTodo = (props) => {\r\n  const { dayId } = useParams();\r\n  const { loading, data, refetch } = useQuery(GET_ME);\r\n  let todos = data?.me || [];\r\n  \r\n  const [value, setValue] = useState(new Date());\r\n  const view = \"month\";\r\n  const history = useHistory();\r\n  const firstUpdate = useRef(true);\r\n  var renderNoteList;\r\n  var valueDate;\r\n\r\n\r\n\r\n  if (todos.savedTodos) {\r\n    \r\n    if (!loading) {\r\n      var thisPageTodo = todos.savedTodos.filter(todo => todo.date === dayId)\r\n      //if they have ever posted before, they can see the notes section. We link part of the prop in the note section, and if they dont have todos it'll break\r\n      renderNoteList = true;\r\n    }\r\n  }\r\n  //for calender\r\n  useEffect(() => {\r\n    if (firstUpdate.current) {\r\n      firstUpdate.current = false;\r\n      return;\r\n    }\r\n    //converts date format from calendar to specific order for app\r\n    let valueYear = dateHelp.getYear(value);\r\n    let valueDay = dateHelp.getDay(value);\r\n    let valueMonthLetters = dateHelp.getMonthLetters(value);\r\n    let valueMonth = dateHelp.monthConversion(valueMonthLetters);\r\n    valueDate = valueYear + valueMonth + valueDay;\r\n\r\n    history.push(`/day/${(valueDate)}`); // This is be executed when the state changes\r\n  }, [value]);\r\n\r\n  \r\n  return (\r\n    <div className=\"my-3\">\r\n      <div className=\"py-4\">\r\n        <blockquote\r\n          className=\"p-4\"\r\n          style={{\r\n            fontSize: '1.5rem',\r\n            fontStyle: 'italic',\r\n            border: '2px dotted #1a1a1a',\r\n            lineHeight: '1.5',\r\n          }}\r\n        >\r\n          Date: \r\n          {dateHelp.writtenDate(dayId)}\r\n\r\n        </blockquote>\r\n      </div>\r\n      \r\n      <Container className=\"wholeCon\">\r\n        <div className=\"calDiv\">\r\n        <Calendar\r\n          showNavigation={true}\r\n          onChange={setValue}\r\n          value={value}\r\n          view={view}\r\n        />\r\n        </div>\r\n        <NoteForm\r\n          value={value.toString().split(' ').slice(1, 4).join().replace(/,/g, \"\")}\r\n         {...{refetch}}\r\n        />\r\n        {renderNoteList ? (\r\n        <div className=\"col-12 col-md-8 mb-3\">\r\n          {loading ? (\r\n            <div>Loading...</div>\r\n          ) : (\r\n            <NoteList\r\n              todos={thisPageTodo}\r\n              value={value.toString().split(' ').slice(1, 4).join().replace(/,/g, \"\")}\r\n              {...{refetch}}\r\n            />\r\n          )}\r\n        </div>\r\n        ) : (<div>Add a note?</div>)}\r\n      </Container>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayTodo;\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_ME } from \"../utils/queries\";\r\nimport dateHelp from '../utils/dateHelp';\r\n\r\nconst Month = () => {\r\n    const { loading, data } = useQuery(GET_ME);\r\n    const todos = data?.me || [];\r\n    var allTodos = todos.savedTodos;\r\n\r\n    const monthLetters = dateHelp.getMonthLetters();\r\n    const monthNumber = dateHelp.monthConversion(monthLetters);\r\n    const thisMonth = monthNumber;\r\n    const fullNameMonth = dateHelp.monthFullName(thisMonth);\r\n    var renderMonthlyReview;\r\n    \r\n    if (allTodos) {\r\n        renderMonthlyReview = true;\r\n\r\n\r\n        if (!loading) {\r\n            //gets all the todos that were created this month\r\n            var thisMonthTodo = allTodos.filter(todo => dateHelp.getMonth(todo.date) === thisMonth)\r\n        }\r\n    }\r\n\r\n    if (!allTodos) {\r\n        return <h3>No notes for this month yet.</h3>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"wholeCon\">\r\n                <div className=\"todolDiv\">\r\n                    {renderMonthlyReview ? (\r\n                        <div className=\"col-12 col-md-8 mb-3\">\r\n                            {loading ? (\r\n                                <div>Loading...</div>\r\n                            ) : (\r\n\r\n                                <ol>{fullNameMonth} To-Dos\r\n                                    {thisMonthTodo.map((todo) => (\r\n\r\n                                        todo.isComplete ? (\r\n                                            <li className=\" d-flex mb-1 listItem\" key={todo._id}>  ✔ {todo.task} <span className=\"dateFont\"> {dateHelp.writtenDate(todo.date)} </span></li>\r\n                                        ) : (\r\n                                            <li className=\" d-flex mb-1 listItem\" key={todo._id}>  ✖ {todo.task} <span className=\"dateFont\"> {dateHelp.writtenDate(todo.date)} </span> </li>\r\n                                        )\r\n\r\n                                    ))\r\n                                    }\r\n                                </ol>\r\n                            )}\r\n                        </div>\r\n                    ) : (\r\n                        <div>Add a note to a date to see your monthly review!</div>\r\n                    )}\r\n                </div>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Month;\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { useMutation } from '@apollo/client'\r\nimport { CREATE_USER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  //create variable for posting user data\r\n  const [createUser, {error}] = useMutation(CREATE_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const {data} = await createUser({ variables: {...userFormData}});\r\n      \r\n      Auth.login(data.createUser.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='username'>Username</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your username'\r\n            name='username'\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Your email address'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n      {error && (\r\n              <div className=\"my-3 p-3 bg-danger text-white\">\r\n                {error.message}\r\n              </div>\r\n            )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","// see SignupForm.js for comments\r\nimport React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { useMutation } from '@apollo/client'\r\nimport { LOGIN_USER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [loginUser, {error}] = useMutation(LOGIN_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const {data} = await loginUser({ variables: {...userFormData}});\r\n      \r\n      Auth.login(data.login.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your email'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n      {error && (\r\n              <div className=\"my-3 p-3 bg-danger text-white\">\r\n                {error.message}\r\n              </div>\r\n            )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\nimport Auth from '../utils/auth';\r\nimport Month from '../pages/Month';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Custom Calendar\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n          <Navbar.Collapse id='navbar'>\r\n            <Nav className='ml-auto'>\r\n              {/* if user is logged in show month review and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                  <Nav.Link as={Link} to='/Month'>\r\n                    Month\r\n                  </Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey='login'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='signup-modal'>\r\n              <Nav variant='pills'>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from 'react';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context'; \r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Home from './pages/Home';\r\nimport DayTodo from './pages/Day';\r\nimport Month from './pages/Month';\r\n\r\nimport Navbar from './components/Navbar';\r\n\r\n// Construct our main GraphQL API endpoint\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem('id_token');\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n    <Router>\r\n      <>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route exact path='/' component={Home} />\r\n          <Route exact path='/day/:dayId' component={DayTodo} />\r\n          <Route exact path='/month' component={Month} />\r\n          <Route render={() => <h1 className='display-1'>Wrong page!</h1>} />\r\n        </Switch>\r\n      </>\r\n    </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}