{"version":3,"sources":["components/Note.js","components/NotesGroup.js","utils/auth.js","pages/Home.js","utils/mutations.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["Note","className","NotesGroup","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Home","useState","value","onChange","view","setView","Jumbotron","fluid","Container","showWeekNumbers","showNavigation","console","log","CardColumns","CREATE_USER","gql","LOGIN_USER","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","useMutation","createUser","error","handleInputChange","event","target","name","handleFormSubmit","a","preventDefault","currentTarget","checkValidity","stopPropagation","variables","data","Auth","login","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","required","Feedback","Button","disabled","message","LoginForm","loginUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","loggedIn","onClick","logout","Modal","size","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Title","Item","eventKey","Body","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b050b9db.chunk.js","sourcesContent":["//note div will act as the parent div for the note component\nimport React, { useState } from 'react';\nconst Note = () => {\n    return <div className='note'>\n        <span>Whad up, this is a test for the first note.</span>\n        <div className='note-footer'>\n            <small>11/02/2021</small>\n        </div>\n        </div>;\n};\n\nexport default Note;\n\n// Lines 17 - 26 will go in App.Js or where applicable for run. This will import the note group into the application. \n\n//import NotesGroup from './components/NotesGroup';\n\n// const App = () => {\n//  return (\n//    <div class Name= 'container'>\n//   </div>\n//  );\n//};\n\n//export default App;","import Note from './Note';\nimport React, { useState } from 'react';\n//created a group of notes component. \n//line6 renders a note component. (multiple notes can be tacked underneach to create a note group or list of notes)\n\nconst NotesGroup = () => {\n    return (\n        < div className = 'notes-group'> \n            <Note />\n            <Note />\n            <Note />\n            <Note />\n        </div>\n    )\n}\n\nexport default NotesGroup;","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport NotesGroup from '../components/NotesGroup'\n// import { useMutation } from '@apollo/client';\n// import { SAVE_TODO } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\n// import { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\n\nconst Home = () => {\n  const [value, onChange] = useState(new Date());\n  const [view, setView] = useState(\"month\");\n  const [day, setDay] = useState(\"\")\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n        \n        </Container>\n      </Jumbotron>\n\n      <Container>\n      <Calendar\n      //testing things out\n      showWeekNumbers\n     showNavigation={true}\n      onChange={onChange}\n      value={value}\n      onChange={setView}\n      view={view}\n      onClickDay={console.log(\"hello\")}\n        \n      // Auth.loggedIn() ? (.Link as{Link} to='/day'\n      //   <>\n      //     <.Link as={Link} to='/saved'>\n      //       See Your Books\n      //     </Nav.Link>\n      //     <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n      //   </>\n      // ) : (\n      //   <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n      // )}\n      \n\n\n      \n      />\n\n\n        {/* //  onChange={onChange}\n        // defaultView=\"day\"\n        // value={value}\n        // tileContent={tileContent}\n        // defaultView={\"day\"} */}\n        \n       \n      \n        \n        <CardColumns>\n          <NotesGroup/>\n         \n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default Home;\n","import { gql } from '@apollo/client';\n\nexport const CREATE_USER = gql`\n  mutation createUser($username: String!, $email: String!, $password: String!) {\n    createUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\nexport const SAVE_TODO = gql`\n  mutation saveTodo($input: TodoInput!) {\n    saveTodo(input: $input) {\n        _id\n        username\n        savedTodos{\n           task\n           day\n           month\n           todoId  \n        }\n    }\n  }\n`;\n\nexport const DELETE_TODO = gql`\n  mutation deleteTodo($todoId: String!) {\n    deleteTodo(todoId: $todoId) {\n        _id\n        username\n        savedTodos{\n          task\n          day\n          month\n          todoId  \n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client'\nimport { CREATE_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  //create variable for posting user data\n  const [createUser, {error}] = useMutation(CREATE_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const {data} = await createUser({ variables: {...userFormData}});\n      \n      Auth.login(data.createUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n      {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client'\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [loginUser, {error}] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const {data} = await loginUser({ variables: {...userFormData}});\n      \n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n      {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Super Cool Calendar\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Monthly Review\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    Single Day\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context'; \nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\n\nimport Navbar from './components/Navbar';\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n      <>\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={Home} />\n          {/* <Route exact path='/day/:dayId' component={SavedBooks} /> */}\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n        </Switch>\n      </>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n\n\n//import NotesGroup from './components/NotesGroup';\n\n// const App = () => {\n//  return (\n//    <div class Name= 'container'>\n//   </div>\n//  );\n//};\n\n//export default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}